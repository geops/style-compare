{"version":3,"sources":["store/actions.js","store/reducers.js","i18n.js","components/Map/Map.js","components/Map/index.js","components/Permalink/index.js","components/Permalink/Permalink.js","App.js","serviceWorker.js","index.js"],"names":["SET_CENTER","SET_ZOOM","setCenter","data","type","setZoom","reducers","state","mapLeft","OLMap","controls","interactions","defaultInteractions","altShiftDragRotate","pinchRotate","mapRight","action","center","zoom","resources","de","en","i18n","use","initReactI18next","init","lng","keySeperator","interpolation","escapeValue","useStyles","makeStyles","map","width","height","inputWrapper","background","position","top","left","padding","paddingTop","Map","permalinkParam","useSelector","useState","qs","parse","window","location","search","tilesUrl","setTilesUrl","dispatch","useDispatch","classes","baseLayer","useMemo","params","history","replaceState","undefined","pathname","stringify","MapboxLayer","url","BasicMap","className","layers","onMapMoved","evt","getView","getCenter","getZoom","Grid","container","item","xs","TextField","id","label","value","placeholder","fullWidth","margin","InputLabelProps","shrink","variant","onChange","target","Zoom","defaultProps","Permalink","useEffect","parameters","z","parseFloat","x","y","borderRight","borderleft","App","Boolean","hostname","match","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","subscribe","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71302018.chunk.js","sourcesContent":["export const SET_CENTER = 'SET_CENTER';\nexport const SET_ZOOM = 'SET_ZOOM';\n\nexport const setCenter = (data) => {\n  return { type: SET_CENTER, data };\n};\n\nexport const setZoom = (data) => {\n  return { type: SET_ZOOM, data };\n};\n","import OLMap from 'ol/Map';\nimport { defaults as defaultInteractions } from 'ol/interaction';\n\nimport { SET_CENTER, SET_ZOOM } from './actions';\n\nconst reducers = (\n  state = {\n    mapLeft: new OLMap({\n      controls: [],\n      interactions: defaultInteractions({\n        altShiftDragRotate: false,\n        pinchRotate: false,\n      }),\n    }),\n    mapRight: new OLMap({\n      controls: [],\n      interactions: defaultInteractions({\n        altShiftDragRotate: false,\n        pinchRotate: false,\n      }),\n    }),\n  },\n  action,\n) => {\n  const { data } = action;\n  switch (action.type) {\n    case SET_CENTER:\n      return { ...state, center: data };\n    case SET_ZOOM:\n      return { ...state, zoom: data };\n    default:\n      return state;\n  }\n};\nexport default reducers;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport de from './translations/de.json';\nimport en from './translations/en.json';\n\nconst resources = {\n  de,\n  en,\n};\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: 'de',\n  keySeperator: false,\n  interpolation: {\n    escapeValue: false,\n  },\n});\n\nexport default i18n;\n","import React, { useState, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport OLMap from 'ol/Map';\nimport { MapboxLayer } from 'mobility-toolbox-js/ol';\nimport BasicMap from 'react-spatial/components/BasicMap';\nimport { TextField, Grid, makeStyles } from '@material-ui/core';\nimport Zoom from 'react-spatial/components/Zoom';\nimport qs from 'query-string';\nimport { setCenter, setZoom } from '../../store/actions';\n\n// Styles\nimport 'react-spatial/themes/default/index.scss';\nimport 'ol/ol.css';\n\nconst useStyles = makeStyles(() => ({\n  map: {\n    width: '100%',\n    height: '100%',\n  },\n  inputWrapper: {\n    background: 'white',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: 15,\n    paddingTop: 8,\n  },\n}));\n\nconst Map = ({ map, permalinkParam }) => {\n  // Store\n  const center = useSelector((state) => state.center);\n  const zoom = useSelector((state) => state.zoom);\n  const [tilesUrl, setTilesUrl] = useState(\n    qs.parse(window.location.search)[permalinkParam] || '',\n  );\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const baseLayer = useMemo(() => {\n    // Update permalink\n    const params = qs.parse(window.location.search);\n    params[permalinkParam] = tilesUrl;\n    window.history.replaceState(\n      undefined,\n      undefined,\n      `${window.location.pathname}?${qs.stringify(params)}`,\n    );\n\n    // Update layer\n    return new MapboxLayer({\n      url: tilesUrl,\n    });\n  }, [tilesUrl, permalinkParam]);\n\n  return (\n    <>\n      <BasicMap\n        map={map}\n        className={classes.map}\n        layers={[baseLayer]}\n        center={center}\n        zoom={zoom}\n        onMapMoved={(evt) => {\n          dispatch(setCenter(evt.map.getView().getCenter()));\n          dispatch(setZoom(evt.map.getView().getZoom()));\n        }}\n      />\n      <Grid container className={classes.inputWrapper}>\n        <Grid item xs={12}>\n          <TextField\n            id=\"outlined-full-width\"\n            label=\"GL Style URL\"\n            value={tilesUrl}\n            placeholder=\"Paste the URL to a GL Style JSON here\"\n            fullWidth\n            margin=\"normal\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            variant=\"outlined\"\n            onChange={(evt) => {\n              setTilesUrl(evt.target.value);\n            }}\n          />\n        </Grid>\n      </Grid>\n      <Zoom map={map} />\n    </>\n  );\n};\n\nMap.propTypes = {\n  permalinkParam: PropTypes.string,\n  map: PropTypes.instanceOf(OLMap),\n};\n\nMap.defaultProps = {\n  permalinkParam: 'left',\n  map: null,\n};\n\nexport default Map;\n","import Map from './Map';\n\nexport default Map;\n","import Permalink from './Permalink';\n\nexport default Permalink;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport OLMap from 'ol/Map';\nimport qs from 'query-string';\nimport RSPermalink from 'react-spatial/components/Permalink';\nimport { setCenter, setZoom } from '../../store/actions';\n\nconst Permalink = ({ map }) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const parameters = {\n      ...qs.parse(window.location.search),\n    };\n\n    const z = parseFloat(parameters.z);\n    const x = parseFloat(parameters.x);\n    const y = parseFloat(parameters.y);\n\n    if (x && y) {\n      dispatch(setCenter([x, y]));\n    }\n\n    if (z) {\n      dispatch(setZoom(z));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return <RSPermalink map={map} />;\n};\n\nPermalink.propTypes = {\n  map: PropTypes.instanceOf(OLMap).isRequired,\n};\n\nexport default Permalink;\n","// Core Functions\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport Map from './components/Map';\nimport Permalink from './components/Permalink';\n\nimport './App.scss';\n\nconst useStyles = makeStyles(() => ({\n  container: { height: '100%' },\n  mapLeft: { position: 'relative', borderRight: '1px solid lightgray' },\n  mapRight: { position: 'relative', borderleft: '1px solid lightgray' },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  const mapLeft = useSelector((state) => state.mapLeft);\n  const mapRight = useSelector((state) => state.mapRight);\n\n  return (\n    <>\n      <Grid container className={classes.container}>\n        <Grid item xs={6} className={classes.mapLeft}>\n          <Map permalinkParam=\"left\" map={mapLeft} />\n        </Grid>\n        <Grid item xs={6} className={classes.mapRight}>\n          <Map permalinkParam=\"right\" map={mapRight} />\n        </Grid>\n      </Grid>\n      <Permalink map={mapLeft} />\n    </>\n  );\n};\n\nexport default App;\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable no-underscore-dangle */\n// Core Dependencies\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducers from './store/reducers';\nimport 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only';\n\nimport './i18n';\n\n// Root Component\nimport App from './App';\n\n// Others\nimport * as serviceWorker from './serviceWorker';\n\n// Store\nconst store = createStore(\n  reducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nstore.subscribe(() => {});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}