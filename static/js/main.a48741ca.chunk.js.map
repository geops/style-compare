{"version":3,"sources":["store/actions.js","store/reducers.js","i18n.js","components/Map/Map.js","components/Map/index.js","App.js","serviceWorker.js","index.js"],"names":["SET_CENTER","SET_ZOOM","reducers","state","action","data","type","center","zoom","resources","de","en","i18n","use","initReactI18next","init","lng","keySeperator","interpolation","escapeValue","useStyles","makeStyles","map","width","height","input","position","top","left","right","margin","background","padding","Map","permalinkParam","useSelector","useState","qs","parse","window","location","search","tilesUrl","setTilesUrl","dispatch","useDispatch","classes","baseLayer","useMemo","params","history","replaceState","undefined","pathname","stringify","MapboxLayer","url","BasicMap","className","layers","onMapMoved","evt","getView","getCenter","setZoom","getZoom","TextField","label","variant","value","onChange","target","defaultProps","container","mapLeft","borderRight","mapRight","borderleft","App","Grid","item","xs","Boolean","hostname","match","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","subscribe","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a48741ca.chunk.js","sourcesContent":["export const SET_CENTER = 'SET_CENTER';\nexport const SET_ZOOM = 'SET_ZOOM';\n\nexport const setCenter = (data) => {\n  return { type: SET_CENTER, data };\n};\n\nexport const setZoom = (data) => {\n  return { type: SET_ZOOM, data };\n};\n","import { SET_CENTER, SET_ZOOM } from './actions';\n\nconst reducers = (state = [], action) => {\n  const { data } = action;\n  switch (action.type) {\n    case SET_CENTER:\n      return { ...state, center: data };\n    case SET_ZOOM:\n      return { ...state, zoom: data };\n    default:\n      return state;\n  }\n};\nexport default reducers;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport de from './translations/de.json';\nimport en from './translations/en.json';\n\nconst resources = {\n  de,\n  en,\n};\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: 'de',\n  keySeperator: false,\n  interpolation: {\n    escapeValue: false,\n  },\n});\n\nexport default i18n;\n","import React, { useState, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { MapboxLayer } from 'mobility-toolbox-js/ol';\nimport BasicMap from 'react-spatial/components/BasicMap';\nimport { TextField, makeStyles } from '@material-ui/core';\nimport qs from 'query-string';\nimport { setCenter, setZoom } from '../../store/actions';\n\n// Styles\nimport './Map.sass';\nimport 'react-spatial/themes/default/index.scss';\nimport 'ol/ol.css';\n\nconst useStyles = makeStyles(() => ({\n  map: {\n    width: '100%',\n    height: '100%',\n  },\n  input: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    margin: 'auto',\n    background: 'white',\n    padding: 15,\n  },\n}));\n\nconst Map = ({ permalinkParam }) => {\n  // Store\n  const center = useSelector((state) => state.center);\n  const zoom = useSelector((state) => state.zoom);\n  const [tilesUrl, setTilesUrl] = useState(\n    qs.parse(window.location.search)[permalinkParam] ||\n      `https://maps.geops.io/styles/base_bright_v2/style.json`,\n  );\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const baseLayer = useMemo(() => {\n    // Update permalink\n    const params = qs.parse(window.location.search);\n    params[permalinkParam] = tilesUrl;\n    window.history.replaceState(\n      undefined,\n      undefined,\n      `${window.location.pathname}?${qs.stringify(params)}`,\n    );\n\n    // Update layer\n    return new MapboxLayer({\n      url: tilesUrl,\n    });\n  }, [tilesUrl, permalinkParam]);\n\n  return (\n    <>\n      <BasicMap\n        className={classes.map}\n        layers={[baseLayer]}\n        center={center}\n        zoom={zoom}\n        onMapMoved={(evt) => {\n          dispatch(setCenter(evt.map.getView().getCenter()));\n          dispatch(setZoom(evt.map.getView().getZoom()));\n        }}\n      />\n      <TextField\n        label=\"Tiles url\"\n        className={classes.input}\n        variant=\"outlined\"\n        value={tilesUrl}\n        onChange={(evt) => {\n          setTilesUrl(evt.target.value);\n        }}\n      />\n    </>\n  );\n};\n\nMap.propTypes = {\n  permalinkParam: PropTypes.string,\n};\n\nMap.defaultProps = { permalinkParam: 'left' };\n\nexport default Map;\n","import Map from './Map';\n\nexport default Map;\n","// Core Functions\nimport React from 'react';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport Map from './components/Map';\n\nimport './App.css';\n\nconst useStyles = makeStyles(() => ({\n  container: { height: '100%' },\n  mapLeft: { position: 'relative', borderRight: '5px solid black' },\n  mapRight: { position: 'relative', borderleft: '5px solid black' },\n}));\n\nexport default function App() {\n  const classes = useStyles();\n\n  return (\n    <Grid container className={classes.container}>\n      <Grid item xs={6} className={classes.mapLeft}>\n        <Map permalinkParam=\"left\" />\n      </Grid>\n      <Grid item xs={6} className={classes.mapRight}>\n        <Map permalinkParam=\"right\" />\n      </Grid>\n    </Grid>\n  );\n}\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-console */\n/* eslint-disable no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable no-underscore-dangle */\n// Core Dependencies\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducers from './store/reducers';\nimport 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only';\n\nimport './i18n';\n\n// Root Component\nimport App from './App';\n\n// Others\nimport * as serviceWorker from './serviceWorker';\n\n// Store\nconst store = createStore(\n  reducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nstore.subscribe(() => {});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}